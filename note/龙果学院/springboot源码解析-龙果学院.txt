------------------------------spring与springboot源码阅读环境搭建
1、springframwork下载4.3.13版本：https://github.com/spring-projects/spring-framework/tree/v4.3.13.RELEASE，git中切换tag即可选择版本；
2、安装gradle：http://services.gradle.org/distributions/，下载后解压，并将 /bin路径配置到环境变量path中；使用idea打开springframwork，然后Import Module，
按Gradle方式导入；
3、springboot下载1.5.9版本：https://github.com/spring-projects/spring-boot/tree/v1.5.9.RELEASE，idea打开spring-boot，然后Import Maven，按maven方式打开；
------------------------------springboot源码分析
------------------------------SpringApplication类的run()方法中的initialize()方法解析
创建 maven项目spring-boot-analysis，创建启动类 SpringBootAnalysisApplication如下，使用@SpringBootApplication依赖spring-boot-autoconfigure包，SpringApplication
依赖
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class SpringBootAnalysisApplication{
    public static void main( String[] args ){
        SpringApplication.run(SpringBootAnalysisApplication.class,args);
    }
}
跟 run()方法，进入SpringApplication类，一直跟到initialize(sources)方法，可以采用打断点的方式，先看下一步调用哪里，就在那里 打断点；
private void initialize(Object[] sources) {
    if (sources != null && sources.length > 0) {
        this.sources.addAll(Arrays.asList(sources));
    }

    this.webEnvironment = this.deduceWebEnvironment();
    this.setInitializers(this.getSpringFactoriesInstances(ApplicationContextInitializer.class));
    this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));
    this.mainApplicationClass = this.deduceMainApplicationClass();
}
跟initialize(Object[] sources)里面的this.deduceWebEnvironment()方法，该方法遍历数组 WEB_ENVIRONMENT_CLASSES =new String[]{"javax.servlet.Servlet",
"org.springframework.web.context.ConfigurableWebApplicationContext"}，检查classpath中是否有以上2个类，并将值(true|false)赋给SpringApplication对象的
webEnvironment成员变量，表示启动程序是否为一个web应用；
private boolean deduceWebEnvironment() {
    String[] var1 = WEB_ENVIRONMENT_CLASSES;
    int var2 = var1.length;
    for(int var3 = 0; var3 < var2; ++var3) {
        String className = var1[var3];
        if (!ClassUtils.isPresent(className, (ClassLoader)null)) {
            return false;
        }
    }
    return true;
}
跟deduceWebEnvironment()方法里面的isPresent()方法
public static boolean isPresent(String className, ClassLoader classLoader) {
    try {
        forName(className, classLoader);
        return true;
    } catch (Throwable var3) {
        return false;
    }
}
其中 forName()方法作用：使用类加载器classLoader加载className，成功返回true，出异常说明不存在，返回false；实际中pom.xml文件中依赖spring-boot-starter-web，
就返回true，不依赖该web包，就返回false；通过右侧Maven观察spring-boot-starter-web包依赖spring-webmvc包，因此类加载器可以加载到org.springframework.web.context.ConfigurableWebApplicationContext；
spring-boot-starter-web包依赖spring-boot-starter-tomcat包依赖tomcat-embed-core包，该包定义了Servlet接口，因此类加载器可以加载到该javax.servlet.Servlet，
因此判定是一个web项目；

回到 SpringApplication类的initialize()方法里面的 this.setInitializers(this.getSpringFactoriesInstances(ApplicationContextInitializer.class));方法，
跟 getSpringFactoriesInstances(ApplicationContextInitializer.class)方法：
在classpath路径下的jar包中包含的 /META-INFO/spring.factories文件里找到org.springframework.context.ApplicationContextInitializer对应的属性，然后实例化
并排序，设置到SpringApplication对象的initiallizer属性，该属性是一个ArrayList类型；
private <T> Collection<? extends T> getSpringFactoriesInstances(Class<T> type) {
    return this.getSpringFactoriesInstances(type, new Class[0]);
}
跟 getSpringFactoriesInstances()方法，
private <T> Collection<? extends T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
    //获取当前线程的classLoader
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    //List转换成Set，避免重复
    Set<String> names = new LinkedHashSet(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    List<T> instances = this.createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    //对实例进行排序
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
跟 SpringFactoriesLoader.loadFactoryNames(type, classLoader)方法，classLoader是当前线程的，不是null，因此执行 classLoader.getResources("META-INF/spring.factories")，
加载指定路径下的资源；全局搜索spring.factories，发现spring-boot-starter-*相关依赖里面 META-INF/文件夹里面都有该spring.factories文件
public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {
    String factoryClassName = factoryClass.getName();
    try {
        //classLoader是当前线程的，不是null，因此执行 classLoader.getResources("META-INF/spring.factories")，加载指定路径下的资源；
        Enumeration<URL> urls = classLoader != null ? classLoader.getResources("META-INF/spring.factories") : ClassLoader.getSystemResources("META-INF/spring.factories");
        ArrayList result = new ArrayList();
        //加载 META-INF/spring.factories中定义的 类全名className；
        while(urls.hasMoreElements()) {
            URL url = (URL)urls.nextElement();
            Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));
            String factoryClassNames = properties.getProperty(factoryClassName);
            //将类全名className以 "," 分隔，然后加入 result中
            result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));
        }
        return result;
    } catch (IOException var8) {
        throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() + "] factories from location [" + "META-INF/spring.factories" + "]", var8);
    }
}

回到 getSpringFactoriesInstances()方法里面的createSpringFactoriesInstances()方法，
private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names) {
    //names指spring.factories中的key
    List<T> instances = new ArrayList(names.size());
    Iterator var7 = names.iterator();
    while(var7.hasNext()) {
        String name = (String)var7.next();
        try {
            //遍历加载 spring.factories中 各 类全名，只加载ApplicationContextInitializer接口的子类；
            Class<?> instanceClass = ClassUtils.forName(name, classLoader);
            Assert.isAssignable(type, instanceClass);
            Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
            //获得对应构造器
            T instance = BeanUtils.instantiateClass(constructor, args);
            //将instance加入集合 instances中
            instances.add(instance);
        } catch (Throwable var12) {
            throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, var12);
        }
    }
    return instances;
}

回到 getSpringFactoriesInstances()方法里面的AnnotationAwareOrderComparator.sort(instances);方法 对实例进行排序；
回到 initialize()方法的setListeners()方法，
public void setListeners(Collection<? extends ApplicationListener<?>> listeners) {
    this.listeners = new ArrayList();
    this.listeners.addAll(listeners);
}
至此，run()方法中的初始化方法initialize(Object[] sources)解析完成，接下来解析 run()方法：

---run()方法解析
---第04节SpringApplication run方法解析(1)--前3步
SpringApplication run()方法共13步：
1、初始化 StopWatch，调用其start()方法，开始计时；
2、调用configureHeadlessProperty设置系统属性 java.awt.headless，这里设置为true，表示运行在服务器端，在没有显示器和鼠标键盘的模式下工作，模拟输入输出设备功能；
3、调用SpringApplicationRunListeners的starting()方法；
4、创建一个DefaultApplicationArguments对象,它持有着args参数，就是main函数传进来的参数.调用prepareEnvironment()方法
5、打印banner
6、创建SpringBoot上下文
7、初始化FailureAnalyzers
8、调用prepareContext
9、调用AbstractApplicationContext的refresh()方法,并注册钩子
10、在容器完成刷新后，依次调用注册的Runners
11、调用SpringApplicationRunListeners#finished
12、停止计时
13、初始化过程中出现异常时调用handleRunFailure进行处理,然后抛出IllegalStateException异常.
SpringApplication类中run()方法如下：
public ConfigurableApplicationContext run(String... args) {
    //---前3步
    StopWatch stopWatch = new StopWatch();
    stopWatch.start();
    ConfigurableApplicationContext context = null;
    FailureAnalyzers analyzers = null;
    this.configureHeadlessProperty();
    SpringApplicationRunListeners listeners = this.getRunListeners(args);
    listeners.starting();
    //---
    try {
        ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
        ConfigurableEnvironment environment = this.prepareEnvironment(listeners, applicationArguments);
        Banner printedBanner = this.printBanner(environment);
        context = this.createApplicationContext();
        new FailureAnalyzers(context);
        this.prepareContext(context, environment, listeners, applicationArguments, printedBanner);
        this.refreshContext(context);
        this.afterRefresh(context, applicationArguments);
        listeners.finished(context, (Throwable)null);
        stopWatch.stop();
        if (this.logStartupInfo) {
            (new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), stopWatch);
        }

        return context;
    } catch (Throwable var9) {
        this.handleRunFailure(context, listeners, (FailureAnalyzers)analyzers, var9);
        throw new IllegalStateException(var9);
    }
}
跟run()方法中的new StopWatch()进入计时器类 StopWatch，跟其start()方法和stop()方法；
跟run()方法中的configureHeadlessProperty()方法
private void configureHeadlessProperty() {
    // 设置系统属性java.awt.headless，这里设置为true，表示运行在服务器端，在没有显示器和鼠标键盘的模式下工作，模拟输入输出设备功能；
    System.setProperty("java.awt.headless", System.getProperty("java.awt.headless", Boolean.toString(this.headless)));
}
跟run()方法中的getRunListeners(args)方法，其中getSpringFactoriesInstances()方法作用，从/META-INF/spring.factories中找到SpringApplicationRunListener
private SpringApplicationRunListeners getRunListeners(String[] args) {
    Class<?>[] types = new Class[]{SpringApplication.class, String[].class};
    return new SpringApplicationRunListeners(logger, this.getSpringFactoriesInstances(SpringApplicationRunListener.class, types, this, args));
}
跟getSpringFactoriesInstances()方法：
private <T> Collection<? extends T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    Set<String> names = new LinkedHashSet(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    List<T> instances = this.createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
-->org.springframework.boot.SpringApplication.getSpringFactoriesInstances(Class<T>, Class<?>[], Object...)
		// 加载/META/spring.factories文件里找到 org.springframework.boot.SpringApplicationRunListener 配置的值
		// 此时配置的 值只有1个 等于org.springframework.boot.context.event.EventPublishingRunListener
跟createSpringFactoriesInstances()方法：
private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names) {
    List<T> instances = new ArrayList(names.size());
    Iterator var7 = names.iterator();
    while(var7.hasNext()) {
        String name = (String)var7.next();
        try {
            Class<?> instanceClass = ClassUtils.forName(name, classLoader);
            // 判断EventPublishingRunListener是否是SpringApplicationRunListener接口的实现类
            Assert.isAssignable(type, instanceClass);
            // 根据传入的args获取 EventPublishingRunListener对应的构造器
            Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
            // 跟BeanUtils#instantiateClass()
            T instance = BeanUtils.instantiateClass(constructor, args);
            instances.add(instance);
        } catch (Throwable var12) {...}
    }
    return instances;
}
跟跟BeanUtils#instantiateClass()：
public static <T> T instantiateClass(Constructor<T> ctor, Object... args) throws BeanInstantiationException {
    Assert.notNull(ctor, "Constructor must not be null");
    try {
        // 将构造器暴力破解
        ReflectionUtils.makeAccessible(ctor);
        // 进入EventPublishingRunListener构造方法，如下：
        return ctor.newInstance(args);
    } catch (Exception e) {...}
}
进入EventPublishingRunListener构造方法：
public EventPublishingRunListener(SpringApplication application, String[] args) {
    this.application = application;
    this.args = args;
    this.initialMulticaster = new SimpleApplicationEventMulticaster();
    for (ApplicationListener<?> listener : application.getListeners()) {
        this.initialMulticaster.addApplicationListener(listener);
    }
}
获得SpringApplication 中的listeners 依次添加到SimpleApplicationEventMulticaster中的defaultRetriever.applicationListeners 中；
SpringApplication 中的listeners什么时候赋值的呢？如下：
SpringApplication # initialize()
private void initialize(Object[] sources) {
    if (sources != null && sources.length > 0) {
         this.sources.addAll(Arrays.asList(sources));
     }
     this.webEnvironment = this.deduceWebEnvironment();
     this.setInitializers(this.getSpringFactoriesInstances(ApplicationContextInitializer.class));
     // getSpringFactoriesInstances(ApplicationListener.class)获得/MET-INF/spring.factories中获取关于ApplicationListener的配置，然后给listeners赋值
     this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));
     this.mainApplicationClass = this.deduceMainApplicationClass();
}
回到SpringApplication # getRunListener():
private SpringApplicationRunListeners getRunListeners(String[] args) {
    Class<?>[] types = new Class[]{SpringApplication.class, String[].class};
    // getSpringFactoriesInstances()后会 初始化SpringApplicationRunListeners，跟new SpringApplicationRunListeners()代码如下：
    return new SpringApplicationRunListeners(logger, this.getSpringFactoriesInstances(SpringApplicationRunListener.class, types, this, args));
}
SpringApplicationRunListeners # SpringApplicationRunListeners()
SpringApplicationRunListeners(Log log,
        Collection<? extends SpringApplicationRunListener> listeners) {
    this.log = log;
    this.listeners = new ArrayList<SpringApplicationRunListener>(listeners);
}
然后调用 SpringApplicationRunListeners # starting()方法
public void starting() {
    // 遍历SpringApplicationRunListener接口的所有实现类，目前listeners里只有一个EventPublishingRunListener实现类，并调用其listener.starting();方法
    for (SpringApplicationRunListener listener : this.listeners) {
        // 调用 SpringApplicationRunListener接口实现类EventPublishingRunListener的starting()方法，跟进去如下：
        listener.starting();
    }
}
EventPublishingRunListener.starting()方法
@Override
public void starting() {
    // initialMulticaster是一个转发器，multicastEvent()发布一个ApplicationStartedEvent事件，跟multicastEvent()方法
    this.initialMulticaster.multicastEvent(new ApplicationStartedEvent(this.application, this.args));
}
SimpleApplicationEventMulticaster.multicastEvent()方法
public void multicastEvent(ApplicationEvent event) {
    // 跟 resolveDefaultEventType(event)方法
    this.multicastEvent(event, this.resolveDefaultEventType(event));
}
SimpleApplicationEventMulticaster.resolveDefaultEventType()方法
private ResolvableType resolveDefaultEventType(ApplicationEvent event) {
    // 跟 forInstance(event)方法
    return ResolvableType.forInstance(event);
}
ResolvableType.forInstance()
public static ResolvableType forInstance(Object instance) {
    Assert.notNull(instance, "Instance must not be null");
    // 判断传入的instance 是否是ResolvableTypeProvider的实例，如果不是，执行最后一句 return
    if (instance instanceof ResolvableTypeProvider) {
        ResolvableType type = ((ResolvableTypeProvider) instance).getResolvableType();
        if (type != null) {
            return type;
        }
    }
    // 创建对应的 ResolvableType，跟 forClass()方法
    return ResolvableType.forClass(instance.getClass());
}
ResolvableType.forClass(Class<?> baseType, Class<?> implementationClass)
public static ResolvableType forClass(Class<?> baseType, Class<?> implementationClass) {
    Assert.notNull(baseType, "Base type must not be null");
    ResolvableType asType = forType(implementationClass).as(baseType);
    return (asType == NONE ? forType(baseType) : asType);
}
ResolvableType.ResolvableType(Class<?> clazz) 直接实例化一个ResolvableType对象；
private ResolvableType(Class<?> clazz) {
    this.resolved = (clazz != null ? clazz : Object.class); // clazz即 ApplicationStartedEvent.class
    this.type = this.resolved;
    this.typeProvider = null;
    this.variableResolver = null;
    this.componentType = null;
    this.hash = null;
}
SimpleApplicationEventMulticaster.multicastEvent(final ApplicationEvent event, ResolvableType eventType) 真正发布事件
public void multicastEvent(final ApplicationEvent event, ResolvableType eventType) {
    ResolvableType type = eventType != null ? eventType : this.resolveDefaultEventType(event);
    // 跟 getApplicationListeners(event, type)
    Iterator var4 = this.getApplicationListeners(event, type).iterator();
    while(var4.hasNext()) {
        final ApplicationListener<?> listener = (ApplicationListener)var4.next();
        Executor executor = this.getTaskExecutor();
        if (executor != null) {
            executor.execute(new Runnable() {
                public void run() {
                    SimpleApplicationEventMulticaster.this.invokeListener(listener, event);
                }
            });
        } else {
            this.invokeListener(listener, event);
        }
    }
}
SimpleApplicationEventMulticaster.getApplicationListeners(ApplicationEvent event, ResolvableType eventType)：
// SimpleApplicationEventMulticaster转发器持有一系列 listeners，传入事件是 ApplicationStartedEvent，获得对applicationstart方法感兴趣的applicationlist
protected Collection<ApplicationListener<?>> getApplicationListeners(ApplicationEvent event, ResolvableType eventType) {
    Object source = event.getSource();
    Class<?> sourceType = source != null ? source.getClass() : null;
    // 构造ListenerCacheKey
    AbstractApplicationEventMulticaster.ListenerCacheKey cacheKey = new AbstractApplicationEventMulticaster.ListenerCacheKey(eventType, sourceType);
    // 查询对应缓存，有值直接返回，没有加载缓存
    AbstractApplicationEventMulticaster.ListenerRetriever retriever = (AbstractApplicationEventMulticaster.ListenerRetriever)this.retrieverCache.get(cacheKey);
    if (retriever != null) {
        return retriever.getApplicationListeners();
        // 加载缓存，此时传入的event是 ApplicationStartedEvent，跟 ClassUtils.isCacheSafe()
    } else if (this.beanClassLoader == null || ClassUtils.isCacheSafe(event.getClass(), this.beanClassLoader) && (sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader))) {
        Object var7 = this.retrievalMutex;
        synchronized(this.retrievalMutex) {
            retriever = (AbstractApplicationEventMulticaster.ListenerRetriever)this.retrieverCache.get(cacheKey);
            if (retriever != null) {
                return retriever.getApplicationListeners();
            } else {
                retriever = new AbstractApplicationEventMulticaster.ListenerRetriever(true);
                Collection<ApplicationListener<?>> listeners = this.retrieveApplicationListeners(eventType, sourceType, retriever);
                this.retrieverCache.put(cacheKey, retriever);
                return listeners;
            }
        }
    } else {
        return this.retrieveApplicationListeners(eventType, sourceType, (AbstractApplicationEventMulticaster.ListenerRetriever)null);
    }
}
ClassUtils.isCacheSafe()；Java中类加载器 ClassLoader分 3种：1 ApplicationClassLoader；2 ExtentionClassLoader；3 BootstrapClassLoader；
// ApplicationClassLoader先问ExtentionClassLoader是否可以加载，ExtentionClassLoader再问BootstrapClassLoader是否可以加载，如果BootstrapClassLoader可以
// 加载则BootstrapClassLoader加载，如果BootstrapClassLoader不能加载，告诉ExtentionClassLoader，如果ExtentionClassLoader可以加载则加载，如果不能加载则告诉
// ApplicationClassLoader，由ApplicationClassLoader加载；类比，一个流水线，3个类加载器是3个工人，来一个任务，先传到最里面，看最里面能不能处理，如果最里面
// 不能处理，则依次往外面传，谁能处理谁处理；
public static boolean isCacheSafe(Class<?> clazz, ClassLoader classLoader) {
    Assert.notNull(clazz, "Class must not be null");
    try {
        ClassLoader target = clazz.getClassLoader();
        // target == null 说明加载的类是 bootstrap
        if (target == null) {return true;}
        ClassLoader cur = classLoader;
        if (cur == target) {return true;}
        while (cur != null) {
            cur = cur.getParent();
            if (cur == target) {return true;}
        }
        return false;
    }
    catch (SecurityException ex) {return true;}
}
AbstractApplicationEventMulticaster.retrieveApplicationListeners()
private Collection<ApplicationListener<?>> retrieveApplicationListeners(ResolvableType eventType, Class<?> sourceType, AbstractApplicationEventMulticaster.ListenerRetriever retriever) {
    LinkedList<ApplicationListener<?>> allListeners = new LinkedList();
    Object var7 = this.retrievalMutex;
    LinkedHashSet listeners;
    LinkedHashSet listenerBeans;
    // 在成员变量retrievalMutex上面加锁，多个线程操作时，只有一个线程能获得锁，其他线程等待在这个锁上
    synchronized(this.retrievalMutex) {
        listeners = new LinkedHashSet(this.defaultRetriever.applicationListeners);
        listenerBeans = new LinkedHashSet(this.defaultRetriever.applicationListenerBeans);
    }
    Iterator var14 = listeners.iterator();
    while(var14.hasNext()) {
        ApplicationListener<?> listener = (ApplicationListener)var14.next();
        // 依次遍历，判断是否支持传进来的事件，跟 supportsEvent()方法
        if (this.supportsEvent(listener, eventType, sourceType)) {
            if (retriever != null) {
                retriever.applicationListeners.add(listener);
            }
            allListeners.add(listener);
        }
    }
    if (!listenerBeans.isEmpty()) {
        BeanFactory beanFactory = this.getBeanFactory();
        Iterator var16 = listenerBeans.iterator();
        while(var16.hasNext()) {
            String listenerBeanName = (String)var16.next();
            try {
                Class<?> listenerType = beanFactory.getType(listenerBeanName);
                if (listenerType == null || this.supportsEvent(listenerType, eventType)) {
                    ApplicationListener<?> listener = (ApplicationListener)beanFactory.getBean(listenerBeanName, ApplicationListener.class);
                    if (!allListeners.contains(listener) && this.supportsEvent(listener, eventType, sourceType)) {
                        if (retriever != null) {
                            retriever.applicationListenerBeans.add(listenerBeanName);
                        }
                        allListeners.add(listener);
                    }
                }
            } catch (NoSuchBeanDefinitionException var13) {
                ;
            }
        }
    }
    AnnotationAwareOrderComparator.sort(allListeners);
    return allListeners;
}
AbstractApplicationEventMulticaster.supportsEvent()方法
protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {
    GenericApplicationListener smartListener = listener instanceof GenericApplicationListener ? (GenericApplicationListener)listener : new GenericApplicationListenerAdapter(listener);
    // 跟 supportsSourceType(sourceType)
    return ((GenericApplicationListener)smartListener).supportsEventType(eventType) && ((GenericApplicationListener)smartListener).supportsSourceType(sourceType);
}
GenericApplicationListenerAdapter.supportsSourceType(Class<?> sourceType)
@Override
public boolean supportsSourceType(Class<?> sourceType) {
    return isAssignableFrom(sourceType, SOURCE_TYPES);
}




